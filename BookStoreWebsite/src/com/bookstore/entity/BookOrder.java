package com.bookstore.entity;
// Generated Jun 1, 2021, 2:58:15 PM by Hibernate Tools 5.2.12.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * BookOrder generated by hbm2java
 */
@Entity
@Table(name = "book_order", catalog = "bookstoredb")
@NamedQueries({
	@NamedQuery(name="BookOrder.findAll", 	query="Select u from BookOrder u order by u.orderTime desc"),
	@NamedQuery(name="BookOrder.countAll", 	query="Select Count(u) FROM BookOrder u "),
	@NamedQuery(name="BookOrder.findByCustomer", 	query="Select u FROM BookOrder u WHERE u.customer.customerId=:customerId order by u.orderTime desc"),
	@NamedQuery(name="BookOrder.findByIdAndCustomer", 	query="Select u FROM BookOrder u WHERE u.orderId=:orderId and u.customer.customerId=:customerId order by u.orderTime desc")
	})
public class BookOrder implements java.io.Serializable {

	private Integer orderId;
	private Customer customer;
	private Date orderTime;
	private String addressLine1;
	private String addressLine2;
	private String recipientName;
	private String recipientLastname;
	private String recipientPhone;
	private String state;
	private String city;
	private String country;
	private String paymentMethod;
	
	private float orderTotal;
	private float subtotal;
	private float shippingFee;
	private float tax;
	private String status;
	private Set<OrderDetail> orderDetails = new HashSet<OrderDetail>(0);

	public BookOrder() {
	
	}
	
	

	public BookOrder(Customer customer, Date orderTime, String shippingAddress, String recipientName,
			String recipientPhone, String paymentMethod, float orderTotal, String status) {
		
		this.customer = customer;
		this.orderTime = orderTime;
		this.addressLine1 = shippingAddress;
		this.recipientName = recipientName;
		this.recipientPhone = recipientPhone;
		this.paymentMethod = paymentMethod;
		this.orderTotal = orderTotal;
		this.status = status;
	}

	public BookOrder(Customer customer, Date orderTime, String shippingAddress, String recipientName,
			String recipientPhone, String paymentMethod, float orderTotal, String status,
			Set<OrderDetail> orderDetails) {
		this.customer = customer;
		this.orderTime = orderTime;
		this.addressLine1 = shippingAddress;
		this.recipientName = recipientName;
		this.recipientPhone = recipientPhone;
		this.paymentMethod = paymentMethod;
		this.orderTotal = orderTotal;
		this.status = status;
		this.orderDetails = orderDetails;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "order_id", unique = true, nullable = false)
	public Integer getOrderId() {
		return this.orderId;
	}

	public void setOrderId(Integer orderId) {
		this.orderId = orderId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "customer_id", nullable = false)
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "order_time", nullable = false, length = 19)
	public Date getOrderTime() {
		return this.orderTime;
	}

	public void setOrderTime(Date orderTime) {
		this.orderTime = orderTime;
	}

	@Column(name = "recipient_address_line1", nullable = false, length = 256)
	public String getAddressLine1() {
		return this.addressLine1;
	}

	public void setAddressLine1(String shippingAddress) {
		this.addressLine1 = shippingAddress;
	}

	@Column(name = "recipient_name", nullable = false, length = 30)
	public String getRecipientName() {
		return this.recipientName;
	}

	public void setRecipientName(String recipientName) {
		this.recipientName = recipientName;
	}

	@Column(name = "recipient_phone", nullable = false, length = 15)
	public String getRecipientPhone() {
		return this.recipientPhone;
	}

	public void setRecipientPhone(String recipientPhone) {
		this.recipientPhone = recipientPhone;
	}

	@Column(name = "payment_mthod", nullable = false, length = 20)
	public String getPaymentMethod() {
		return this.paymentMethod;
	}

	public void setPaymentMethod(String paymentMethod) {
		this.paymentMethod = paymentMethod;
	}

	@Column(name = "order_total", nullable = false, precision = 12, scale = 0)
	public float getOrderTotal() {
		return this.orderTotal;
	}

	public void setOrderTotal(float orderTotal) {
		this.orderTotal = orderTotal;
	}

	@Column(name = "status", nullable = false, length = 20)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "bookOrder", cascade=CascadeType.ALL,orphanRemoval=true)
	public Set<OrderDetail> getOrderDetails() {
		return this.orderDetails;
	}

	public void setOrderDetails(Set<OrderDetail> orderDetails) {
		this.orderDetails = orderDetails;
	}
	
	
	
	@Column(name = "recipient_address_line2", nullable = false, length = 256)
	public String getAddressLine2() {
		return addressLine2;
	}



	public void setAddressLine2(String addressLine2) {
		this.addressLine2 = addressLine2;
	}

	

	@Column(name = "recipient_lastname", nullable = false, length = 30)
	public String getRecipientLastname() {
		return recipientLastname;
	}



	public void setRecipientLastname(String recipientLastname) {
		this.recipientLastname = recipientLastname;
	}


	@Column(name = "recipient_state", nullable = false, length = 45)
	public String getState() {
		return state;
	}



	public void setState(String state) {
		this.state = state;
	}


	@Column(name = "recipient_city", nullable = false, length = 32)
	public String getCity() {
		return city;
	}



	public void setCity(String city) {
		this.city = city;
	}


	@Column(name = "recipient_country", nullable = false, length = 4)
	public String getCountry() {
		return country;
	}



	public void setCountry(String country) {
		this.country = country;
	}
	
	@Transient
	public String setCountryName() {
		return new Locale("",this.country).getDisplayCountry();
		
	}


	@Column(name = "subtotal", nullable = false,  scale=0, precision=12)
	public float getSubtotal() {
		return subtotal;
	}



	public void setSubtotal(float subTotal) {
		this.subtotal = subTotal;
	}


	@Column(name = "shipping_fee", nullable = false, scale=0, precision=12 )
	public float getShippingFee() {
		return shippingFee;
	}



	public void setShippingFee(float shippingFee) {
		this.shippingFee = shippingFee;
	}


	@Column(name = "tax", nullable = false, scale=0, precision=12)
	public float getTax() {
		return tax;
	}



	public void setTax(float tax) {
		this.tax = tax;
	}



	@Transient
	public int getBookCopies() {
		
		int total= 0;
		
		for(OrderDetail orderDetail : orderDetails) {
			
			total+= orderDetail.getQuantity();
		}
		
		return total;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((orderId == null) ? 0 : orderId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BookOrder other = (BookOrder) obj;
		if (orderId == null) {
			if (other.orderId != null)
				return false;
		} else if (!orderId.equals(other.orderId))
			return false;
		return true;
	}
	
	
	

}
